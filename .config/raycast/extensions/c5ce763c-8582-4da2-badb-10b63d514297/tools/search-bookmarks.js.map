{
  "version": 3,
  "sources": ["../../src/tools/search-bookmarks.ts", "../../src/util/index.ts", "../../src/constants.ts"],
  "sourcesContent": ["import { getBookmarks } from \"../util\";\n\ntype Input = {\n  /** The query to search for in the bookmarks */\n  query: string;\n};\n\nexport default async function (input: Input) {\n  if (!input.query) {\n    return \"Please enter a bookmark search query.\";\n  }\n\n  const bookmarks = await getBookmarks();\n\n  return bookmarks;\n}\n", "import fs from \"fs\";\nimport path from \"path\";\nimport {\n  DEFAULT_CHROME_PROFILE_ID,\n  defaultChromeProfilePath,\n  defaultChromeStatePath,\n  NO_BOOKMARKS_MESSAGE,\n} from \"../constants\";\nimport { getPreferenceValues } from \"@raycast/api\";\nimport { Preferences } from \"../interfaces\";\nimport { BookmarkDirectory, HistoryEntry, RawBookmarks } from \"../interfaces\";\n\ntype ChromeFile = \"History\" | \"Bookmarks\";\nconst userLibraryDirectoryPath = () => {\n  if (!process.env.HOME) {\n    throw new Error(\"$HOME environment variable is not set.\");\n  }\n\n  return path.join(process.env.HOME, \"Library\");\n};\nconst getChromeFilePath = (fileName: ChromeFile, profile?: string) => {\n  const { profilePath } = getPreferenceValues<Preferences>();\n  let resolvedProfilePath;\n  if (profilePath) {\n    resolvedProfilePath = path.join(profilePath, fileName);\n  } else {\n    resolvedProfilePath = path.join(\n      userLibraryDirectoryPath(),\n      ...defaultChromeProfilePath,\n      profile ?? DEFAULT_CHROME_PROFILE_ID,\n      fileName\n    );\n  }\n\n  if (!fs.existsSync(resolvedProfilePath)) {\n    throw new Error(\n      `The profile path ${resolvedProfilePath} does not exist. Please check your Chrome profile location by visiting chrome://version -> Profile Path. Then update it in Extension Settings -> Profile Path.`\n    );\n  }\n\n  return resolvedProfilePath;\n};\n\nexport const getHistoryDbPath = (profile?: string) => getChromeFilePath(\"History\", profile);\n\nexport const getLocalStatePath = () => path.join(userLibraryDirectoryPath(), ...defaultChromeStatePath);\n\nconst getBookmarksFilePath = (profile?: string) => getChromeFilePath(\"Bookmarks\", profile);\n\nfunction extractBookmarkFromBookmarkDirectory(bookmarkDirectory: BookmarkDirectory): HistoryEntry[] {\n  const bookmarks: HistoryEntry[] = [];\n\n  if (bookmarkDirectory.type === \"folder\") {\n    bookmarkDirectory.children.forEach((child) => {\n      bookmarks.push(...extractBookmarkFromBookmarkDirectory(child));\n    });\n  } else if (bookmarkDirectory.type === \"url\" && bookmarkDirectory.url) {\n    bookmarks.push({\n      id: bookmarkDirectory.id,\n      url: bookmarkDirectory.url,\n      title: bookmarkDirectory.name,\n      lastVisited: new Date(bookmarkDirectory.date_added),\n    });\n  }\n  return bookmarks;\n}\n\nconst extractBookmarks = (rawBookmarks: RawBookmarks): HistoryEntry[] => {\n  const bookmarks: HistoryEntry[] = [];\n  Object.keys(rawBookmarks.roots).forEach((rootKey) => {\n    const rootLevelBookmarkFolders = rawBookmarks.roots[rootKey];\n    const bookmarkEntries = extractBookmarkFromBookmarkDirectory(rootLevelBookmarkFolders);\n    bookmarks.push(...bookmarkEntries);\n  });\n  return bookmarks;\n};\n\nexport const getBookmarks = async (profile?: string): Promise<HistoryEntry[]> => {\n  const bookmarksFilePath = getBookmarksFilePath(profile);\n  if (!fs.existsSync(bookmarksFilePath)) {\n    throw new Error(NO_BOOKMARKS_MESSAGE);\n  }\n\n  const fileBuffer = await fs.promises.readFile(bookmarksFilePath, { encoding: \"utf-8\" });\n  return extractBookmarks(JSON.parse(fileBuffer));\n};\n", "export const defaultChromeProfilePath = [\"Application Support\", \"Google\", \"Chrome\"];\nexport const defaultChromeStatePath = [\"Application Support\", \"Google\", \"Chrome\", \"Local State\"];\nexport const DEFAULT_CHROME_PROFILE_ID = \"Default\";\nexport const CHROME_PROFILE_KEY = \"CHROME_PROFILE_KEY\";\nexport const CHROME_PROFILES_KEY = \"CHROME_PROFILES_KEY\";\n\nexport const DownloadText = `\n  # \uD83D\uDEA8Error: Google Chrome browser is not installed\n  ## This extension depends on Google Chrome browser. You must install it to continue.\n  \n  If you have [Homebrew](https://brew.sh/) installed then press \u23CE (Enter Key) to install Google Chrome browser.\n  \n  [Click here](https://www.google.com/chrome/) if you want to download manually.\n  \n  [![Google Chrome](https://www.google.com/chrome/static/images/chrome-logo-m100.svg)]()\n`;\n\nexport const NoBookmarksText = `\n# \uD83D\uDEA8Error: Google Chrome browser has no bookmarks. Please add some bookmarks to continue using this command.\n\n[![Google Chrome](https://www.google.com/chrome/static/images/chrome-logo-m100.svg)]()\n`;\n\nexport const UnknownErrorText = `\n# \uD83D\uDEA8Error: Something happened while trying to run your command\n  \n[![Google Chrome](https://www.google.com/chrome/static/images/chrome-logo-m100.svg)]()\n`;\n\nexport const DEFAULT_ERROR_TITLE = \"An Error Occurred\";\n\nexport const NOT_INSTALLED_MESSAGE = \"Google Chrome not installed\";\nexport const NO_BOOKMARKS_MESSAGE = \"Google Chrome has no bookmarks.\";\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAe,iBACfC,EAAiB,mBCDV,IAAMC,EAA2B,CAAC,sBAAuB,SAAU,QAAQ,EAE3E,IAAMC,EAA4B,UA8BlC,IAAMC,EAAuB,kCDxBpC,IAAAC,EAAoC,wBAK9BC,EAA2B,IAAM,CACrC,GAAI,CAAC,QAAQ,IAAI,KACf,MAAM,IAAI,MAAM,wCAAwC,EAG1D,OAAO,EAAAC,QAAK,KAAK,QAAQ,IAAI,KAAM,SAAS,CAC9C,EACMC,EAAoB,CAACC,EAAsBC,IAAqB,CACpE,GAAM,CAAE,YAAAC,CAAY,KAAI,uBAAiC,EACrDC,EAYJ,GAXID,EACFC,EAAsB,EAAAL,QAAK,KAAKI,EAAaF,CAAQ,EAErDG,EAAsB,EAAAL,QAAK,KACzBD,EAAyB,EACzB,GAAGO,EACHH,GAAWI,EACXL,CACF,EAGE,CAAC,EAAAM,QAAG,WAAWH,CAAmB,EACpC,MAAM,IAAI,MACR,oBAAoBA,CAAmB,gKACzC,EAGF,OAAOA,CACT,EAMA,IAAMI,EAAwBC,GAAqBC,EAAkB,YAAaD,CAAO,EAEzF,SAASE,EAAqCC,EAAsD,CAClG,IAAMC,EAA4B,CAAC,EAEnC,OAAID,EAAkB,OAAS,SAC7BA,EAAkB,SAAS,QAASE,GAAU,CAC5CD,EAAU,KAAK,GAAGF,EAAqCG,CAAK,CAAC,CAC/D,CAAC,EACQF,EAAkB,OAAS,OAASA,EAAkB,KAC/DC,EAAU,KAAK,CACb,GAAID,EAAkB,GACtB,IAAKA,EAAkB,IACvB,MAAOA,EAAkB,KACzB,YAAa,IAAI,KAAKA,EAAkB,UAAU,CACpD,CAAC,EAEIC,CACT,CAEA,IAAME,EAAoBC,GAA+C,CACvE,IAAMH,EAA4B,CAAC,EACnC,cAAO,KAAKG,EAAa,KAAK,EAAE,QAASC,GAAY,CACnD,IAAMC,EAA2BF,EAAa,MAAMC,CAAO,EACrDE,EAAkBR,EAAqCO,CAAwB,EACrFL,EAAU,KAAK,GAAGM,CAAe,CACnC,CAAC,EACMN,CACT,EAEaO,EAAe,MAAOX,GAA8C,CAC/E,IAAMY,EAAoBb,EAAqBC,CAAO,EACtD,GAAI,CAAC,EAAAa,QAAG,WAAWD,CAAiB,EAClC,MAAM,IAAI,MAAME,CAAoB,EAGtC,IAAMC,EAAa,MAAM,EAAAF,QAAG,SAAS,SAASD,EAAmB,CAAE,SAAU,OAAQ,CAAC,EACtF,OAAON,EAAiB,KAAK,MAAMS,CAAU,CAAC,CAChD,ED9EA,eAAOC,EAAwBC,EAAc,CAC3C,OAAKA,EAAM,MAIO,MAAMC,EAAa,EAH5B,uCAMX",
  "names": ["search_bookmarks_exports", "__export", "search_bookmarks_default", "__toCommonJS", "import_fs", "import_path", "defaultChromeProfilePath", "DEFAULT_CHROME_PROFILE_ID", "NO_BOOKMARKS_MESSAGE", "import_api", "userLibraryDirectoryPath", "path", "getChromeFilePath", "fileName", "profile", "profilePath", "resolvedProfilePath", "defaultChromeProfilePath", "DEFAULT_CHROME_PROFILE_ID", "fs", "getBookmarksFilePath", "profile", "getChromeFilePath", "extractBookmarkFromBookmarkDirectory", "bookmarkDirectory", "bookmarks", "child", "extractBookmarks", "rawBookmarks", "rootKey", "rootLevelBookmarkFolders", "bookmarkEntries", "getBookmarks", "bookmarksFilePath", "fs", "NO_BOOKMARKS_MESSAGE", "fileBuffer", "search_bookmarks_default", "input", "getBookmarks"]
}
