{
  "version": 3,
  "sources": ["../../src/tools/list-processes.ts", "../../src/utils/process.ts", "../../src/utils/platform.ts"],
  "sourcesContent": ["import { Process } from \"../types\";\nimport { fetchRunningProcesses } from \"../utils/process\";\n\ntype SortOrder = \"asc\" | \"desc\";\ntype SortField = keyof Process;\n\ntype Input = {\n  /**\n   * Optional array of search terms to filter processes.\n   * For single process search, provide an array with one element.\n   * Example: [\"Logi\"] will find all processes containing \"Logi\" in their name\n   * Example: [\"Chrome\", \"Firefox\"] will find all processes containing either \"Chrome\" or \"Firefox\"\n   */\n  searchTerm?: string[];\n  /**\n   * Field to sort by (defaults to 'mem')\n   */\n  sortBy?: SortField;\n  /**\n   * Sort order (defaults to 'desc')\n   */\n  sortOrder?: SortOrder;\n};\n\nconst sortProcesses = (processes: Process[], field: SortField = \"mem\", order: SortOrder = \"desc\"): Process[] => {\n  return [...processes].sort((a, b) => {\n    const valueA = a[field];\n    const valueB = b[field];\n\n    if (valueA === valueB) return 0;\n    if (valueA === undefined) return 1;\n    if (valueB === undefined) return -1;\n\n    const comparison = valueA < valueB ? -1 : 1;\n    return order === \"desc\" ? -comparison : comparison;\n  });\n};\n\nconst filterProcessesBySearchTerm = (processes: Process[], searchTerms?: string[]): Process[] => {\n  if (!searchTerms?.length) return processes;\n\n  return processes.filter((p) => {\n    const searchIn = `${p.path} ${p.processName} ${p.appName || \"\"}`.toLowerCase();\n    return searchTerms.some((term) => searchIn.includes(term.toLowerCase()));\n  });\n};\n\nconst validateResults = (processes: Process[], searchTerms?: string[]): void => {\n  if (processes.length === 0 && searchTerms?.length) {\n    throw new Error(`No processes found matching \"${searchTerms.join(\", \")}\"`);\n  }\n};\n\n/**\n * List out all running processes.\n * This tool can be called by AI to answer queries like,\n * \"What processes are running right now?\"\n * or \"list processes containing xyz\"\n * or \"list processes containing xyz and abc\"\n *\n * Throws an error if no processes are found matching the search terms\n */\nexport default async function listProcesses(input?: Input): Promise<Process[]> {\n  const processes = await fetchRunningProcesses();\n\n  const filteredProcesses = filterProcessesBySearchTerm(processes, input?.searchTerm);\n  validateResults(filteredProcesses, input?.searchTerm);\n\n  return sortProcesses(filteredProcesses, input?.sortBy, input?.sortOrder);\n}\n", "import { exec } from \"child_process\";\nimport { Process } from \"../types\";\nimport { getProcessListCommand, parseProcessLine, getProcessType, getAppName } from \"./platform\";\n\n/**\n * Get all processes from the system\n * @returns Promise<Process[]> List of processes\n */\nexport async function fetchRunningProcesses(): Promise<Process[]> {\n  return new Promise((resolve, reject) => {\n    const command = getProcessListCommand();\n\n    exec(command, (err, stdout) => {\n      if (err != null) {\n        reject(err);\n        return;\n      }\n\n      const processes = stdout\n        .split(\"\\n\")\n        .map((line) => {\n          const parsed = parseProcessLine(line);\n          if (!parsed || !parsed.processName) return null;\n\n          const type = getProcessType(parsed.path || \"\");\n          const appName = type === \"app\" ? getAppName(parsed.path || \"\", parsed.processName || \"\") : undefined;\n\n          return {\n            id: parsed.id || 0,\n            pid: parsed.pid || 0,\n            cpu: parsed.cpu || 0,\n            mem: parsed.mem || 0,\n            type,\n            path: parsed.path || \"\",\n            processName: parsed.processName || \"\",\n            appName,\n          } as Process;\n        })\n        .filter((process): process is Process => process !== null && process.processName !== \"\");\n\n      resolve(processes);\n    });\n  });\n}\n", "import { Image } from \"@raycast/api\";\nimport { Process } from \"../types\";\n\n/**\n * Platform detection utilities\n */\nexport const platform = process.platform;\nexport const isMac = platform === \"darwin\";\nexport const isWindows = platform === \"win32\";\n\n/**\n * Get platform-specific process list command\n */\nexport function getProcessListCommand(): string {\n  if (isWindows) {\n    // Windows: Use PowerShell to get process information\n    return `powershell \"Get-Process | Select-Object Id,ProcessName,CPU,WorkingSet,Path | ForEach-Object { \\\\\"$($_.Id) $($_.ProcessName) $($_.CPU) $($_.WorkingSet) $($_.Path)\\\\\" }\"`;\n  } else {\n    // macOS: Use ps command\n    return \"ps -eo pid,ppid,pcpu,rss,comm\";\n  }\n}\n\n/**\n * Get platform-specific kill command\n */\nexport function getKillCommand(pid: number, force: boolean = false): string {\n  if (isWindows) {\n    return force ? `taskkill /F /PID ${pid}` : `taskkill /PID ${pid}`;\n  } else {\n    // macOS\n    return force ? `sudo kill -9 ${pid}` : `kill -9 ${pid}`;\n  }\n}\n\n/**\n * Parse process information based on platform\n */\nexport function parseProcessLine(line: string): Partial<Process> | null {\n  if (!line.trim()) return null;\n\n  if (isWindows) {\n    // Windows PowerShell output format: \"PID ProcessName CPU WorkingSet Path\"\n    const parts = line.trim().split(/\\s+/);\n    if (parts.length < 4) return null;\n\n    const [id, processName, cpu, mem, ...pathParts] = parts;\n    const path = pathParts.join(\" \") || \"\";\n\n    return {\n      id: parseInt(id) || 0,\n      pid: 0, // Parent PID not easily available in basic Windows commands\n      cpu: parseFloat(cpu) || 0,\n      mem: parseInt(mem) || 0,\n      path: path,\n      processName: processName || \"\",\n    };\n  } else {\n    // macOS: ps output format\n    const defaultValue = [\"\", \"\", \"\", \"\", \"\", \"\"];\n    const regex = /(\\d+)\\s+(\\d+)\\s+(\\d+[.|,]\\d+)\\s+(\\d+)\\s+(.*)/;\n    const [, id, pid, cpu, mem, path] = line.match(regex) ?? defaultValue;\n\n    if (!id) return null;\n\n    const processName = path.match(/[^/]*[^/]*$/i)?.[0] ?? \"\";\n\n    return {\n      id: parseInt(id),\n      pid: parseInt(pid),\n      cpu: parseFloat(cpu),\n      mem: parseInt(mem),\n      path: path,\n      processName: processName,\n    };\n  }\n}\n\n/**\n * Detect process type based on platform\n */\nexport function getProcessType(path: string): Process[\"type\"] {\n  if (isMac) {\n    // macOS-specific detection\n    const isPrefPane = path.includes(\".prefPane\");\n    const isApp = path.includes(\".app/\");\n    return isPrefPane ? \"prefPane\" : isApp ? \"app\" : \"binary\";\n  } else if (isWindows) {\n    // Windows-specific detection\n    const isApp =\n      path.toLowerCase().endsWith(\".exe\") &&\n      (path.toLowerCase().includes(\"program files\") || path.toLowerCase().includes(\"applications\"));\n    return isApp ? \"app\" : \"binary\";\n  } else {\n    // Fallback for unsupported platforms\n    return \"binary\";\n  }\n}\n\n/**\n * Extract application name based on platform\n */\nexport function getAppName(path: string, processName: string): string | undefined {\n  if (isMac) {\n    // macOS: Extract from .app bundle path\n    return path.match(/(?<=\\/)[^/]+(?=\\.app\\/)/)?.[0];\n  } else if (isWindows) {\n    // Windows: Use process name without .exe extension\n    return processName.replace(/\\.exe$/i, \"\");\n  } else {\n    // Fallback for unsupported platforms\n    return processName;\n  }\n}\n\n/**\n * Get platform-specific file icon\n */\nexport function getFileIcon(process: Process): Image.ImageLike {\n  if (isMac) {\n    // macOS-specific icon handling\n    if (process.type === \"prefPane\") {\n      return {\n        fileIcon: process.path?.replace(/(.+\\.prefPane)(.+)/, \"$1\") ?? \"\",\n      };\n    }\n\n    if (process.type === \"app\" || process.type === \"aggregatedApp\") {\n      return { fileIcon: process.path?.replace(/(.+\\.app)(.+)/, \"$1\") ?? \"\" };\n    }\n\n    return \"/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/ExecutableBinaryIcon.icns\";\n  } else if (isWindows) {\n    // Windows-specific icon handling\n    if (process.type === \"app\") {\n      return { fileIcon: process.path };\n    }\n    return \"\uD83D\uDDA5\uFE0F\"; // Generic computer icon for Windows binaries\n  } else {\n    // Fallback for unsupported platforms\n    return \"\u2699\uFE0F\"; // Generic gear icon\n  }\n}\n\n/**\n * Get platform-specific error messages and help\n */\nexport function getPlatformSpecificErrorHelp(isForceKill: boolean): {\n  title: string;\n  message?: string;\n  helpUrl?: string;\n} {\n  if (isMac && isForceKill) {\n    return {\n      title: \"Failed to Force Kill Process\",\n      message: \"Please ensure that touch ID/password prompt is enabled for sudo\",\n      helpUrl: \"https://dev.to/siddhantkcode/enable-touch-id-authentication-for-sudo-on-macos-sonoma-14x-4d28\",\n    };\n  } else if (isWindows && isForceKill) {\n    return {\n      title: \"Failed to Force Kill Process\",\n      message: \"Administrative privileges may be required. Try running as administrator.\",\n    };\n  } else {\n    return {\n      title: \"Failed to Kill Process\",\n      message: \"The process could not be terminated. It may have already exited or require elevated privileges.\",\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": ["list_processes_exports", "__export", "listProcesses", "__toCommonJS", "import_child_process", "platform", "isMac", "isWindows", "getProcessListCommand", "parseProcessLine", "line", "isWindows", "parts", "id", "processName", "cpu", "mem", "pathParts", "path", "defaultValue", "regex", "pid", "getProcessType", "isMac", "isPrefPane", "isApp", "getAppName", "fetchRunningProcesses", "resolve", "reject", "command", "getProcessListCommand", "err", "stdout", "processes", "line", "parsed", "parseProcessLine", "type", "getProcessType", "appName", "getAppName", "process", "sortProcesses", "processes", "field", "order", "a", "b", "valueA", "valueB", "comparison", "filterProcessesBySearchTerm", "searchTerms", "p", "searchIn", "term", "validateResults", "listProcesses", "input", "fetchRunningProcesses", "filteredProcesses"]
}
